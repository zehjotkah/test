import { MediaRule, MixinRule, NestingRule, PlaintextRule, type FontFaceOptions, type MediaRuleOptions } from "./rules";
import { StyleElement } from "./style-element";
import type { TransformValue } from "./to-value";
export declare class StyleSheet {
    #private;
    nestingRules: Map<string, NestingRule>;
    constructor(element: StyleElement);
    setTransformer(transformValue: TransformValue): void;
    addMediaRule(id: string, options?: MediaRuleOptions): MediaRule;
    addPlaintextRule(cssText: string): PlaintextRule | Map<string, PlaintextRule>;
    addMixinRule(name: string): MixinRule;
    addNestingRule(selector: string, descendantSuffix?: string): NestingRule;
    addFontFaceRule(options: FontFaceOptions): number;
    generateWith({ nestingRules, transformValue, }: {
        nestingRules: NestingRule[];
        transformValue?: TransformValue;
    }): string;
    get cssText(): string;
    clear(): void;
    render(): void;
    unmount(): void;
    setAttribute(name: string, value: string): void;
    getAttribute(name: string): string | null | undefined;
}
