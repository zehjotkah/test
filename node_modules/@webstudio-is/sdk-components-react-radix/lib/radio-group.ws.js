import { RadioCheckedIcon as c, ItemIcon as i, TriggerIcon as s, RadioDotIcon as l } from "@webstudio-is/icons/svg";
import { defaultStates as o } from "@webstudio-is/react-sdk";
import { div as d, button as u, span as m } from "@webstudio-is/sdk/normalize.css";
import { flex as t, gap as r, items as y, aspect as b, h as f, w as h, rounded as G, border as a, text as R, focusVisible as I, outline as g, ring as v, disabled as k, cursor as x, opacity as V } from "./theme/tailwind-classes.js";
import { buttonReset as C } from "./theme/styles.js";
import { propsRadioGroup as w, propsRadioGroupItem as S, propsRadioGroupIndicator as q } from "./__generated__/radio-group.props.js";
const e = ({
  value: n,
  label: p
}) => ({
  type: "instance",
  component: "Label",
  // flex items-center space-x-2
  styles: [t(), y("center"), r(2)].flat(),
  children: [
    {
      type: "instance",
      component: "RadioGroupItem",
      props: [{ name: "value", type: "string", value: n }],
      // aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background
      // focus:outline-none
      // focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2
      // disabled:cursor-not-allowed disabled:opacity-50
      styles: [
        b("square"),
        f(4),
        h(4),
        G("full"),
        a(),
        a("primary"),
        R("primary"),
        I(
          [g(), v("ring", 2, "background", 2)].flat()
        ),
        k([x("not-allowed"), V(50)].flat())
      ].flat(),
      children: [
        {
          type: "instance",
          component: "RadioGroupIndicator",
          children: [
            {
              type: "instance",
              component: "HtmlEmbed",
              label: "Indicator Icon",
              props: [
                {
                  type: "string",
                  name: "code",
                  value: l
                }
              ],
              children: []
            }
          ]
        }
      ]
    },
    {
      type: "instance",
      component: "Text",
      children: [{ type: "text", value: p, placeholder: !0 }]
    }
  ]
}), H = {
  category: "radix",
  order: 100,
  type: "container",
  description: "A set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.",
  icon: c,
  states: [
    ...o,
    {
      label: "Checked",
      selector: "[data-state=checked]",
      category: "component-states"
    },
    {
      label: "Unchecked",
      selector: "[data-state=unchecked]",
      category: "component-states"
    }
  ],
  presetStyle: {
    div: d
  },
  template: [
    {
      type: "instance",
      component: "RadioGroup",
      variables: {
        radioGroupValue: { initialValue: "" }
      },
      // grid gap-2
      styles: [t(), t("col"), r(2)].flat(),
      props: [
        {
          type: "expression",
          name: "value",
          code: "radioGroupValue"
        },
        {
          name: "onValueChange",
          type: "action",
          value: [
            {
              type: "execute",
              args: ["value"],
              code: "radioGroupValue = value"
            }
          ]
        }
      ],
      children: [
        e({ value: "default", label: "Default" }),
        e({ value: "comfortable", label: "Comfortable" }),
        e({ value: "compact", label: "Compact" })
      ]
    }
  ]
}, L = {
  category: "hidden",
  type: "container",
  constraints: {
    relation: "ancestor",
    component: { $eq: "RadioGroup" }
  },
  icon: i,
  states: o,
  presetStyle: {
    button: [u, C].flat()
  }
}, N = {
  category: "hidden",
  type: "container",
  detachable: !1,
  icon: s,
  states: o,
  presetStyle: {
    span: m
  }
}, U = {
  props: w,
  initialProps: ["id", "className", "name", "value", "required"]
}, $ = {
  props: S,
  initialProps: ["value"]
}, j = {
  props: q
};
export {
  H as metaRadioGroup,
  N as metaRadioGroupIndicator,
  L as metaRadioGroupItem,
  U as propsMetaRadioGroup,
  j as propsMetaRadioGroupIndicator,
  $ as propsMetaRadioGroupItem
};
