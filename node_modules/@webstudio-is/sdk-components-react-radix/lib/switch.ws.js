import { SwitchIcon as i, TriggerIcon as l } from "@webstudio-is/icons/svg";
import { defaultStates as s } from "@webstudio-is/react-sdk";
import { button as d, span as p } from "@webstudio-is/sdk/normalize.css";
import { inlineFlex as h, property as e, shrink as m, cursor as c, items as u, rounded as o, border as n, transition as r, focusVisible as k, outline as f, ring as b, disabled as y, opacity as g, state as t, bg as a, pointerEvents as w, block as S, h as x, w as C, shadow as T } from "./theme/tailwind-classes.js";
import { buttonReset as v } from "./theme/styles.js";
import { propsSwitch as I, propsSwitchThumb as M } from "./__generated__/switch.props.js";
const F = {
  category: "radix",
  order: 11,
  type: "container",
  description: "A control that allows the user to toggle between checked and not checked.",
  icon: i,
  states: [
    ...s,
    {
      label: "Checked",
      selector: "[data-state=checked]",
      category: "component-states"
    },
    {
      label: "Unchecked",
      selector: "[data-state=unchecked]",
      category: "component-states"
    }
  ],
  presetStyle: {
    button: [d, v].flat()
  },
  template: [
    {
      type: "instance",
      component: "Switch",
      variables: {
        switchChecked: { initialValue: !1 }
      },
      props: [
        {
          name: "checked",
          type: "expression",
          code: "switchChecked"
        },
        {
          name: "onCheckedChange",
          type: "action",
          value: [
            {
              type: "execute",
              args: ["checked"],
              code: "switchChecked = checked"
            }
          ]
        }
      ],
      // peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors
      // focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background
      // disabled:cursor-not-allowed disabled:opacity-50
      // data-[state=checked]:bg-primary
      // data-[state=unchecked]:bg-input
      styles: [
        // We are not supporting peer like styles yet
        h(),
        e("height", "24px"),
        e("width", "44px"),
        m(0),
        c("pointer"),
        u("center"),
        o("full"),
        n(2),
        n("transparent"),
        r("all"),
        k(
          [f(), b("ring", 2, "background", 2)].flat()
        ),
        y([c("not-allowed"), g(50)].flat()),
        t([a("primary")].flat(), "[data-state=checked]"),
        t([a("input")].flat(), "[data-state=unchecked]")
      ].flat(),
      children: [
        {
          type: "instance",
          component: "SwitchThumb",
          // pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform
          // data-[state=checked]:translate-x-5
          // data-[state=unchecked]:translate-x-0
          styles: [
            w("none"),
            S(),
            x(5),
            C(5),
            o("full"),
            a("background"),
            T("lg"),
            r("transform"),
            t(
              [e("transform", "translateX(20px)")].flat(),
              "[data-state=checked]"
            ),
            t(
              [e("transform", "translateX(0px)")].flat(),
              "[data-state=unchecked]"
            )
          ].flat(),
          children: []
        }
      ]
    }
  ]
}, N = {
  category: "hidden",
  type: "container",
  detachable: !1,
  icon: l,
  states: [
    ...s,
    {
      label: "Checked",
      selector: "[data-state=checked]",
      category: "component-states"
    },
    {
      label: "Unchecked",
      selector: "[data-state=unchecked]",
      category: "component-states"
    }
  ],
  presetStyle: {
    span: p
  }
}, P = {
  props: I,
  initialProps: ["id", "className", "name", "value", "checked", "required"]
}, R = {
  props: M
};
export {
  F as metaSwitch,
  N as metaSwitchThumb,
  P as propsMetaSwitch,
  R as propsMetaSwitchThumb
};
