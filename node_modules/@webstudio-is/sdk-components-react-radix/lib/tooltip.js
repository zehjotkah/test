import { jsx as r } from "react/jsx-runtime";
import * as e from "@radix-ui/react-tooltip";
import { getClosestInstance as a } from "@webstudio-is/react-sdk/runtime";
import { forwardRef as c, Children as p } from "react";
const m = c((t, o) => /* @__PURE__ */ r(e.Provider, { children: /* @__PURE__ */ r(e.Root, { ...t }) })), h = c(({ children: t, ...o }, n) => {
  const i = p.toArray(t)[0];
  return /* @__PURE__ */ r(e.Trigger, { asChild: !0, ref: n, ...o, children: i ?? /* @__PURE__ */ r("button", { children: "Add button or link" }) });
}), T = c(({ sideOffset: t = 4, hideWhenDetached: o = !0, ...n }, i) => /* @__PURE__ */ r(e.Portal, { children: /* @__PURE__ */ r(
  e.Content,
  {
    ref: i,
    hideWhenDetached: o,
    sideOffset: t,
    ...n
  }
) })), s = "@webstudio-is/sdk-components-react-radix", P = {
  onNavigatorUnselect: (t, o) => {
    for (const n of o.instancePath)
      if (n.component === `${s}:TooltipContent`) {
        const i = a(
          o.instancePath,
          n,
          `${s}:Tooltip`
        );
        i && t.setMemoryProp(i, "open", void 0);
      }
  },
  onNavigatorSelect: (t, o) => {
    for (const n of o.instancePath)
      if (n.component === `${s}:TooltipContent`) {
        const i = a(
          o.instancePath,
          n,
          `${s}:Tooltip`
        );
        i && t.setMemoryProp(i, "open", !0);
      }
  }
};
export {
  m as Tooltip,
  T as TooltipContent,
  h as TooltipTrigger,
  P as hooksTooltip
};
