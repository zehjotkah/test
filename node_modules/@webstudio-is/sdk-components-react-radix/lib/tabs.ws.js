import { TabsIcon as b, HeaderIcon as m, TriggerIcon as g, ContentIcon as T } from "@webstudio-is/icons/svg";
import { defaultStates as y } from "@webstudio-is/react-sdk";
import { button as u, div as h } from "@webstudio-is/sdk/normalize.css";
import { inlineFlex as a, items as r, justify as s, whitespace as f, rounded as c, px as v, py as x, text as t, font as C, transition as q, focusVisible as i, outline as p, ring as l, disabled as $, pointerEvents as L, opacity as w, state as A, bg as d, shadow as M, mt as S, h as k, p as I } from "./theme/tailwind-classes.js";
import { buttonReset as F } from "./theme/styles.js";
import { propsTabs as V, propsTabsList as W, propsTabsTrigger as j, propsTabsContent as D } from "./__generated__/tabs.props.js";
const e = {
  div: h
}, n = [
  a(),
  r("center"),
  s("center"),
  f(),
  c("md"),
  v(3),
  x(1.5),
  t("sm"),
  C("medium"),
  q("all"),
  i(
    [p(), l("ring", 2, "background", 2)].flat()
  ),
  $([L("none"), w(50)].flat()),
  A(
    [d("background"), t("foreground"), M("sm")].flat(),
    "[data-state=active]"
  )
].flat(), o = [
  S(2),
  i(
    [p(), l("ring", 2, "background", 2)].flat()
  )
].flat(), B = {
  category: "radix",
  order: 2,
  type: "container",
  icon: b,
  constraints: [
    {
      relation: "descendant",
      component: { $eq: "TabsTrigger" }
    },
    {
      relation: "descendant",
      component: { $eq: "TabsList" }
    },
    {
      relation: "descendant",
      component: { $eq: "TabsContent" }
    }
  ],
  presetStyle: e,
  description: "A set of panels with content that are displayed one at a time. Duplicate both a tab trigger and tab content to add more tabs. Triggers and content are connected according to their order in the Navigator.",
  template: [
    {
      type: "instance",
      component: "Tabs",
      props: [{ type: "string", name: "defaultValue", value: "0" }],
      children: [
        {
          type: "instance",
          component: "TabsList",
          // inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground
          styles: [
            a(),
            k(10),
            r("center"),
            s("center"),
            c("md"),
            d("muted"),
            I(1),
            t("mutedForeground")
          ].flat(),
          children: [
            {
              type: "instance",
              component: "TabsTrigger",
              styles: n,
              children: [{ type: "text", value: "Account", placeholder: !0 }]
            },
            {
              type: "instance",
              component: "TabsTrigger",
              styles: n,
              children: [
                { type: "text", value: "Password", placeholder: !0 }
              ]
            }
          ]
        },
        {
          type: "instance",
          component: "TabsContent",
          styles: o,
          children: [
            {
              type: "text",
              value: "Make changes to your account here.",
              placeholder: !0
            }
          ]
        },
        {
          type: "instance",
          component: "TabsContent",
          styles: o,
          children: [
            {
              type: "text",
              value: "Change your password here.",
              placeholder: !0
            }
          ]
        }
      ]
    }
  ]
}, G = {
  category: "hidden",
  type: "container",
  icon: m,
  constraints: {
    relation: "ancestor",
    component: { $eq: "Tabs" }
  },
  presetStyle: e
}, J = {
  category: "hidden",
  type: "container",
  icon: g,
  constraints: [
    {
      relation: "ancestor",
      component: { $eq: "TabsList" }
    },
    {
      relation: "ancestor",
      component: { $neq: "TabsTrigger" }
    }
  ],
  indexWithinAncestor: "Tabs",
  label: "Tab Trigger",
  states: [
    ...y,
    {
      category: "component-states",
      label: "Active",
      selector: "[data-state=active]"
    }
  ],
  presetStyle: {
    button: [u, F].flat()
  }
}, K = {
  category: "hidden",
  type: "container",
  label: "Tab Content",
  icon: T,
  constraints: {
    relation: "ancestor",
    component: { $eq: "Tabs" }
  },
  indexWithinAncestor: "Tabs",
  presetStyle: e
}, O = {
  props: V
}, Q = {
  props: W
}, U = {
  props: j
}, X = {
  props: D
};
export {
  B as metaTabs,
  K as metaTabsContent,
  G as metaTabsList,
  J as metaTabsTrigger,
  O as propsMetaTabs,
  X as propsMetaTabsContent,
  Q as propsMetaTabsList,
  U as propsMetaTabsTrigger
};
