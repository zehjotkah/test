import { AccordionIcon as i, ItemIcon as s, HeaderIcon as l, TriggerIcon as p, ContentIcon as d, ChevronDownIcon as m } from "@webstudio-is/icons/svg";
import { defaultStates as y } from "@webstudio-is/react-sdk";
import { h3 as h, button as A, div as g } from "@webstudio-is/sdk/normalize.css";
import { borderB as u, overflow as f, text as I, pb as b, my as v, flex as e, items as x, justify as C, py as H, font as T, hover as w, underline as S, property as t, state as M, h as q, w as $, shrink as k, transition as Y, duration as B } from "./theme/tailwind-classes.js";
import { buttonReset as P } from "./theme/styles.js";
import { propsAccordion as R, propsAccordionItem as W, propsAccordionHeader as j, propsAccordionTrigger as D, propsAccordionContent as E } from "./__generated__/accordion.props.js";
const r = {
  div: g
}, o = [u()].flat(), n = ({
  children: a
}) => ({
  type: "instance",
  component: "AccordionHeader",
  // flex
  styles: [e()].flat(),
  children: [
    {
      type: "instance",
      component: "AccordionTrigger",
      // flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180
      styles: [
        e(),
        e(1),
        x("center"),
        C("between"),
        H(4),
        T("medium"),
        w([S()].flat()),
        t("--accordion-trigger-icon-transform", "0deg"),
        M(
          [t("--accordion-trigger-icon-transform", "180deg")],
          "[data-state=open]"
        )
      ].flat(),
      children: [
        {
          type: "instance",
          component: "Text",
          children: a
        },
        {
          type: "instance",
          component: "Box",
          label: "Icon Container",
          // h-4 w-4 shrink-0 transition-transform duration-200
          styles: [
            t("rotate", "--accordion-trigger-icon-transform"),
            q(4),
            $(4),
            k(0),
            Y("all"),
            B(200)
          ].flat(),
          children: [
            {
              type: "instance",
              component: "HtmlEmbed",
              label: "Chevron Icon",
              props: [
                {
                  type: "string",
                  name: "code",
                  value: m
                }
              ],
              children: []
            }
          ]
        }
      ]
    }
  ]
}), c = [
  f("hidden"),
  I("sm"),
  // transition does not work with display: none
  // tc.transition("all"),
  b(4)
].flat(), K = {
  category: "radix",
  order: 3,
  type: "container",
  icon: i,
  presetStyle: r,
  description: "A vertically stacked set of interactive headings that each reveal an associated section of content. Clicking on the heading will open the item and close other items.",
  template: [
    {
      type: "instance",
      component: "Accordion",
      props: [
        { type: "boolean", name: "collapsible", value: !0 },
        { type: "string", name: "defaultValue", value: "0" }
      ],
      children: [
        {
          type: "instance",
          component: "AccordionItem",
          styles: o,
          children: [
            n({
              children: [
                { type: "text", value: "Is it accessible?", placeholder: !0 }
              ]
            }),
            {
              type: "instance",
              component: "AccordionContent",
              styles: c,
              children: [
                {
                  type: "text",
                  value: "Yes. It adheres to the WAI-ARIA design pattern.",
                  placeholder: !0
                }
              ]
            }
          ]
        },
        {
          type: "instance",
          component: "AccordionItem",
          styles: o,
          children: [
            n({
              children: [
                { type: "text", value: "Is it styled?", placeholder: !0 }
              ]
            }),
            {
              type: "instance",
              component: "AccordionContent",
              styles: c,
              children: [
                {
                  type: "text",
                  value: "Yes. It comes with default styles that matches the other components' aesthetic.",
                  placeholder: !0
                }
              ]
            }
          ]
        },
        {
          type: "instance",
          component: "AccordionItem",
          styles: o,
          children: [
            n({
              children: [
                { type: "text", value: "Is it animated?", placeholder: !0 }
              ]
            }),
            {
              type: "instance",
              component: "AccordionContent",
              styles: c,
              children: [
                {
                  type: "text",
                  value: "Yes. It's animated by default, but you can disable it if you prefer.",
                  placeholder: !0
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}, L = {
  category: "hidden",
  type: "container",
  label: "Item",
  icon: s,
  constraints: {
    relation: "ancestor",
    component: { $eq: "Accordion" }
  },
  indexWithinAncestor: "Accordion",
  presetStyle: r
}, N = {
  category: "hidden",
  type: "container",
  label: "Item Header",
  icon: l,
  constraints: {
    relation: "ancestor",
    component: { $eq: "AccordionItem" }
  },
  detachable: !1,
  presetStyle: {
    h3: [h, v(0)].flat()
  }
}, Q = {
  category: "hidden",
  type: "container",
  label: "Item Trigger",
  icon: p,
  constraints: {
    relation: "ancestor",
    component: { $eq: "AccordionHeader" }
  },
  detachable: !1,
  states: [
    ...y,
    {
      category: "component-states",
      label: "Open",
      selector: "[data-state=open]"
    }
  ],
  presetStyle: {
    button: [A, P].flat()
  }
}, U = {
  category: "hidden",
  type: "container",
  label: "Item Content",
  icon: d,
  constraints: {
    relation: "ancestor",
    component: { $eq: "AccordionItem" }
  },
  detachable: !1,
  presetStyle: r
}, X = {
  props: R,
  initialProps: ["value", "collapsible"]
}, Z = {
  props: W,
  initialProps: ["value"]
}, _ = {
  props: j
}, ee = {
  props: D
}, te = {
  props: E
};
export {
  K as metaAccordion,
  U as metaAccordionContent,
  N as metaAccordionHeader,
  L as metaAccordionItem,
  Q as metaAccordionTrigger,
  X as propsMetaAccordion,
  te as propsMetaAccordionContent,
  _ as propsMetaAccordionHeader,
  Z as propsMetaAccordionItem,
  ee as propsMetaAccordionTrigger
};
