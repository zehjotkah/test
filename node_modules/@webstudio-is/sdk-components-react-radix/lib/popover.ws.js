import { TriggerIcon as e, ContentIcon as o, PopoverIcon as t } from "@webstudio-is/icons/svg";
import "@webstudio-is/react-sdk";
import { div as r } from "@webstudio-is/sdk/normalize.css";
import { z as n, w as p, rounded as i, border as a, bg as s, p as c, text as l, shadow as d, outline as m } from "./theme/tailwind-classes.js";
import { getButtonStyles as y } from "./theme/styles.js";
import { propsPopover as g, propsPopoverTrigger as v, propsPopoverContent as P } from "./__generated__/popover.props.js";
const f = {
  div: r
}, B = {
  category: "hidden",
  type: "container",
  icon: e,
  stylable: !1,
  detachable: !1
}, I = {
  category: "hidden",
  type: "container",
  presetStyle: f,
  icon: o,
  detachable: !1
}, M = {
  category: "radix",
  order: 6,
  type: "container",
  icon: t,
  stylable: !1,
  description: "Displays rich content in a portal, triggered by a button.",
  template: [
    {
      type: "instance",
      component: "Popover",
      props: [],
      children: [
        {
          type: "instance",
          component: "PopoverTrigger",
          children: [
            {
              type: "instance",
              component: "Button",
              styles: y("outline"),
              children: [{ type: "text", value: "Button", placeholder: !0 }]
            }
          ]
        },
        {
          type: "instance",
          component: "PopoverContent",
          /**
           *  z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none
           **/
          styles: [
            n(50),
            p(72),
            i("md"),
            a(),
            s("popover"),
            c(4),
            l("popoverForeground"),
            d("md"),
            m()
          ].flat(),
          children: [
            {
              type: "instance",
              component: "Text",
              children: [
                {
                  type: "text",
                  value: "The text you can edit",
                  placeholder: !0
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}, w = {
  props: g,
  initialProps: ["open"]
}, O = {
  props: v
}, S = {
  props: P,
  initialProps: ["side", "sideOffset", "align", "alignOffset"]
};
export {
  M as metaPopover,
  I as metaPopoverContent,
  B as metaPopoverTrigger,
  w as propsMetaPopover,
  S as propsMetaPopoverContent,
  O as propsMetaPopoverTrigger
};
