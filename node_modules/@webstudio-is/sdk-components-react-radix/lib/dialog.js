import { jsx as n } from "react/jsx-runtime";
import { forwardRef as c, useContext as g, useEffect as h, Children as p, useRef as C } from "react";
import * as i from "@radix-ui/react-dialog";
import { ReactSdkContext as m, getClosestInstance as d } from "@webstudio-is/react-sdk/runtime";
const D = (t) => {
  const { target: e } = t;
  return !(!(e instanceof HTMLAnchorElement) || e.hasAttribute("href") === !1 || e.href === "#" || e.hasAttribute("target") && e.target === "_blank" || t.ctrlKey || t.metaKey);
}, A = c((t, e) => {
  const { open: o, onOpenChange: r } = t, { renderer: s } = g(m);
  return h(() => {
    if (s !== void 0 || o === !1)
      return;
    const a = (l) => {
      const { target: u } = l;
      if (D(l) !== !1) {
        if (!(u instanceof HTMLAnchorElement))
          return !1;
        u.closest('[role="dialog"]') && (r == null || r(!1));
      }
    };
    return window.addEventListener("click", a), () => window.removeEventListener("click", a);
  }, [o, r, s]), /* @__PURE__ */ n(i.Root, { ...t });
}), E = c(({ children: t, ...e }, o) => {
  const r = p.toArray(t)[0];
  return /* @__PURE__ */ n(i.Trigger, { ref: o, asChild: !0, ...e, children: r ?? /* @__PURE__ */ n("button", { children: "Add button or link" }) });
}), P = c((t, e) => /* @__PURE__ */ n(i.DialogPortal, { children: /* @__PURE__ */ n(i.Overlay, { ref: e, ...t }) })), T = c((t, e) => {
  const o = C(!1), { renderer: r } = g(m);
  return h(() => {
    if (r !== void 0)
      return;
    o.current = !1;
    const s = (a) => {
      const { target: l } = a;
      if (D(a) !== !1) {
        if (!(l instanceof HTMLAnchorElement))
          return !1;
        l.closest('[role="dialog"]') && (o.current = !0);
      }
    };
    return window.addEventListener("click", s), () => window.removeEventListener("click", s);
  }, [r]), /* @__PURE__ */ n(
    i.Content,
    {
      ref: e,
      ...t,
      onCloseAutoFocus: (s) => {
        o.current && s.preventDefault();
      }
    }
  );
}), L = i.Close, v = "h1", b = c(({ tag: t = v, children: e, ...o }, r) => /* @__PURE__ */ n(i.DialogTitle, { asChild: !0, children: /* @__PURE__ */ n(t, { ref: r, ...o, children: e }) })), x = i.Description, f = "@webstudio-is/sdk-components-react-radix", M = {
  onNavigatorUnselect: (t, e) => {
    for (const o of e.instancePath)
      if (o.component === `${f}:DialogOverlay`) {
        const r = d(
          e.instancePath,
          o,
          `${f}:Dialog`
        );
        r && t.setMemoryProp(r, "open", void 0);
      }
  },
  onNavigatorSelect: (t, e) => {
    for (const o of e.instancePath)
      if (o.component === `${f}:DialogOverlay`) {
        const r = d(
          e.instancePath,
          o,
          `${f}:Dialog`
        );
        r && t.setMemoryProp(r, "open", !0);
      }
  }
};
export {
  A as Dialog,
  L as DialogClose,
  T as DialogContent,
  x as DialogDescription,
  P as DialogOverlay,
  b as DialogTitle,
  E as DialogTrigger,
  M as hooksDialog
};
