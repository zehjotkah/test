import { CheckboxCheckedIcon as n, CheckMarkIcon as r, TriggerIcon as s } from "@webstudio-is/icons/svg";
import { defaultStates as a } from "@webstudio-is/react-sdk";
import { button as i, span as p } from "@webstudio-is/sdk/normalize.css";
import { flex as e, gap as l, items as t, h as d, w as h, shrink as b, rounded as k, border as o, focusVisible as m, outline as y, ring as u, disabled as x, cursor as f, opacity as g, state as C, bg as I, text as c, justify as v } from "./theme/tailwind-classes.js";
import { buttonReset as w } from "./theme/styles.js";
import { propsCheckbox as M, propsCheckboxIndicator as S } from "./__generated__/checkbox.props.js";
const j = {
  category: "radix",
  order: 101,
  type: "container",
  icon: n,
  description: "Use within a form to allow your users to toggle between checked and not checked. Group checkboxes by matching their “Name” properties. Unlike radios, any number of checkboxes in a group can be checked.",
  states: [
    ...a,
    {
      label: "Checked",
      selector: "[data-state=checked]",
      category: "component-states"
    },
    {
      label: "Unchecked",
      selector: "[data-state=unchecked]",
      category: "component-states"
    }
  ],
  presetStyle: {
    button: [i, w].flat()
  },
  template: [
    {
      type: "instance",
      component: "Label",
      label: "Checkbox Field",
      styles: [e(), l(2), t("center")].flat(),
      children: [
        {
          type: "instance",
          component: "Checkbox",
          variables: {
            checkboxChecked: { initialValue: !1 }
          },
          props: [
            {
              name: "checked",
              type: "expression",
              code: "checkboxChecked"
            },
            {
              name: "onCheckedChange",
              type: "action",
              value: [
                {
                  type: "execute",
                  args: ["checked"],
                  code: "checkboxChecked = checked"
                }
              ]
            }
          ],
          // peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background
          // focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2
          // disabled:cursor-not-allowed disabled:opacity-50
          // data-[state=checked]:bg-primary
          // data-[state=checked]:text-primary-foreground",
          styles: [
            // We are not supporting peer like styles yet
            d(4),
            h(4),
            b(0),
            k("sm"),
            o(),
            o("primary"),
            m(
              [y(), u("ring", 2, "background", 2)].flat()
            ),
            x([f("not-allowed"), g(50)].flat()),
            C(
              [I("primary"), c("primaryForeground")].flat(),
              "[data-state=checked]"
            )
          ].flat(),
          children: [
            {
              type: "instance",
              component: "CheckboxIndicator",
              // flex items-center justify-center text-current
              styles: [
                e(),
                t("center"),
                v("center"),
                c("current")
              ].flat(),
              children: [
                {
                  type: "instance",
                  component: "HtmlEmbed",
                  label: "Indicator Icon",
                  props: [
                    {
                      type: "string",
                      name: "code",
                      value: r
                    }
                  ],
                  children: []
                }
              ]
            }
          ]
        },
        {
          type: "instance",
          component: "Text",
          label: "Checkbox Label",
          props: [{ name: "tag", type: "string", value: "span" }],
          children: [{ type: "text", value: "Checkbox", placeholder: !0 }]
        }
      ]
    }
  ]
}, q = {
  category: "hidden",
  type: "container",
  detachable: !1,
  icon: s,
  states: a,
  presetStyle: {
    span: p
  }
}, E = {
  props: M,
  initialProps: ["id", "className", "name", "value", "required", "checked"]
}, G = {
  props: S
};
export {
  j as metaCheckbox,
  q as metaCheckboxIndicator,
  E as propsMetaCheckbox,
  G as propsMetaCheckboxIndicator
};
