import { type ReactNode } from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { type Hook } from "@webstudio-is/react-sdk/runtime";
export declare const Dialog: import("react").ForwardRefExoticComponent<Omit<DialogPrimitive.DialogProps, "defaultOpen"> & import("react").RefAttributes<HTMLDivElement>>;
/**
 * We're not exposing the 'asChild' property for the Trigger.
 * Instead, we're enforcing 'asChild=true' for the Trigger and making it style-less.
 * This avoids situations where the Trigger inadvertently passes all styles to its child,
 * which would prevent us from displaying styles properly in the builder.
 */
export declare const DialogTrigger: import("react").ForwardRefExoticComponent<{
    children: ReactNode;
} & import("react").RefAttributes<HTMLButtonElement>>;
export declare const DialogOverlay: import("react").ForwardRefExoticComponent<Omit<DialogPrimitive.DialogOverlayProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export declare const DialogContent: import("react").ForwardRefExoticComponent<Omit<DialogPrimitive.DialogContentProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export declare const DialogClose: import("react").ForwardRefExoticComponent<DialogPrimitive.DialogCloseProps & import("react").RefAttributes<HTMLButtonElement>>;
type Tag = "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
export declare const DialogTitle: import("react").ForwardRefExoticComponent<Omit<DialogPrimitive.DialogTitleProps & import("react").RefAttributes<HTMLHeadingElement> & {
    tag?: Tag;
}, "ref"> & import("react").RefAttributes<HTMLHeadingElement>>;
export declare const DialogDescription: import("react").ForwardRefExoticComponent<DialogPrimitive.DialogDescriptionProps & import("react").RefAttributes<HTMLParagraphElement>>;
export declare const hooksDialog: Hook;
export {};
