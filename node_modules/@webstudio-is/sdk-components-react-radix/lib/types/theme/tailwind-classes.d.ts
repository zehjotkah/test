/**
 * Quik and dirty implementation of tailwind classes conversion to webstudio styles.
 */
import type { EmbedTemplateStyleDecl } from "@webstudio-is/react-sdk";
import type { StyleProperty } from "@webstudio-is/css-engine";
import * as theme from "./__generated__/tailwind-theme";
export declare const property: (property: StyleProperty, value: string) => EmbedTemplateStyleDecl;
export declare const z: (value: StringEnumToNumeric<keyof typeof theme.zIndex>) => EmbedTemplateStyleDecl[];
export declare const overflow: (value: "hidden" | "visible" | "scroll" | "auto") => EmbedTemplateStyleDecl[];
export declare const rounded: (value?: keyof typeof theme.borderRadius) => EmbedTemplateStyleDecl[];
type StringEnumToNumeric<T extends string> = T extends `${infer Z extends number}` ? Z : never;
type NonNumeric<T extends string> = T extends `${infer _Z extends number}` ? never : T;
export declare const border: (borderWidthOrColor?: StringEnumToNumeric<keyof typeof theme.borderWidth> | keyof typeof theme.colors) => EmbedTemplateStyleDecl[];
export declare const borderB: (borderWidthOrColor?: StringEnumToNumeric<keyof typeof theme.borderWidth> | keyof typeof theme.colors) => EmbedTemplateStyleDecl[];
declare const paddingProperty: (property: "paddingTop" | "paddingRight" | "paddingBottom" | "paddingLeft") => (padding: StringEnumToNumeric<keyof typeof theme.padding> | NonNumeric<keyof typeof theme.padding>) => EmbedTemplateStyleDecl[];
export declare const pt: ReturnType<typeof paddingProperty>;
export declare const pb: ReturnType<typeof paddingProperty>;
export declare const pl: ReturnType<typeof paddingProperty>;
export declare const pr: ReturnType<typeof paddingProperty>;
export declare const px: ReturnType<typeof paddingProperty>;
export declare const py: ReturnType<typeof paddingProperty>;
export declare const p: ReturnType<typeof paddingProperty>;
declare const marginProperty: (property: "marginTop" | "marginRight" | "marginBottom" | "marginLeft") => (margin: StringEnumToNumeric<keyof typeof theme.margin> | NonNumeric<keyof typeof theme.margin>) => EmbedTemplateStyleDecl[];
export declare const ml: ReturnType<typeof marginProperty>;
export declare const mr: ReturnType<typeof marginProperty>;
export declare const mt: ReturnType<typeof marginProperty>;
export declare const mb: ReturnType<typeof marginProperty>;
export declare const mx: ReturnType<typeof marginProperty>;
export declare const my: ReturnType<typeof marginProperty>;
export declare const m: ReturnType<typeof marginProperty>;
export declare const w: (spacing: StringEnumToNumeric<keyof typeof theme.width> | NonNumeric<keyof typeof theme.width>) => EmbedTemplateStyleDecl[];
export declare const h: (spacing: StringEnumToNumeric<keyof typeof theme.height> | NonNumeric<keyof typeof theme.height>) => EmbedTemplateStyleDecl[];
export declare const minH: (spacing: StringEnumToNumeric<keyof typeof theme.minHeight>) => EmbedTemplateStyleDecl[];
export declare const opacity: (opacity: StringEnumToNumeric<keyof typeof theme.opacity>) => EmbedTemplateStyleDecl[];
export declare const cursor: (cursor: keyof typeof theme.cursor) => EmbedTemplateStyleDecl[];
export declare const maxW: (spacing: StringEnumToNumeric<keyof typeof theme.maxWidth> | NonNumeric<keyof typeof theme.maxWidth>) => EmbedTemplateStyleDecl[];
export declare const top: (spacing: StringEnumToNumeric<keyof typeof theme.inset> | NonNumeric<keyof typeof theme.inset>) => EmbedTemplateStyleDecl[];
export declare const right: (spacing: StringEnumToNumeric<keyof typeof theme.inset> | NonNumeric<keyof typeof theme.inset>) => EmbedTemplateStyleDecl[];
export declare const bottom: (spacing: StringEnumToNumeric<keyof typeof theme.inset> | NonNumeric<keyof typeof theme.inset>) => EmbedTemplateStyleDecl[];
export declare const left: (spacing: StringEnumToNumeric<keyof typeof theme.inset> | NonNumeric<keyof typeof theme.inset>) => EmbedTemplateStyleDecl[];
export declare const inset: (spacing: StringEnumToNumeric<keyof typeof theme.inset> | NonNumeric<keyof typeof theme.inset>) => EmbedTemplateStyleDecl[];
export declare const aspect: (value: "auto" | "square" | "video") => EmbedTemplateStyleDecl[];
export declare const backdropBlur: (blur: keyof typeof theme.blur) => EmbedTemplateStyleDecl[];
export declare const list: (listStyle: keyof typeof theme.listStyleType) => EmbedTemplateStyleDecl[];
export declare const select: (_selectValue: "none") => EmbedTemplateStyleDecl[];
export declare const bg: (color: keyof typeof theme.colors, alpha?: number) => EmbedTemplateStyleDecl[];
export declare const fixed: () => EmbedTemplateStyleDecl[];
export declare const relative: () => EmbedTemplateStyleDecl[];
export declare const absolute: () => EmbedTemplateStyleDecl[];
export declare const grid: () => EmbedTemplateStyleDecl[];
declare const alignItems: {
    readonly start: "flex-start";
    readonly end: "flex-end";
    readonly center: "center";
    readonly baseline: "baseline";
    readonly stretch: "stretch";
};
type AlignItems = keyof typeof alignItems;
export declare const items: (alignItemsParam: AlignItems) => EmbedTemplateStyleDecl[];
declare const justifyContent: {
    readonly start: "flex-start";
    readonly end: "flex-end";
    readonly center: "center";
    readonly between: "space-between";
    readonly around: "space-around";
    readonly evenly: "space-evenly";
    readonly stretch: "stretch";
};
type JustifyContent = keyof typeof justifyContent;
export declare const justify: (justifyContentParam: JustifyContent) => EmbedTemplateStyleDecl[];
export declare const inlineFlex: () => EmbedTemplateStyleDecl[];
export declare const block: () => EmbedTemplateStyleDecl[];
declare const flexDirection: {
    readonly row: "row";
    readonly col: "column";
};
type FlexDirection = keyof typeof flexDirection;
type FlexSizing = 1 | "auto" | "initial" | "none";
export declare const flex: (flexParam?: FlexDirection | FlexSizing) => EmbedTemplateStyleDecl[];
export declare const grow: () => EmbedTemplateStyleDecl[];
export declare const shrink: (value: number) => EmbedTemplateStyleDecl[];
export declare const gap: (gapValue: StringEnumToNumeric<keyof typeof theme.spacing>) => EmbedTemplateStyleDecl[];
export declare const lineClamp: (lineClampValue: StringEnumToNumeric<keyof typeof theme.lineClamp>) => EmbedTemplateStyleDecl[];
export declare const leading: (lineHeight: StringEnumToNumeric<keyof typeof theme.lineHeight> | NonNumeric<keyof typeof theme.lineHeight>) => EmbedTemplateStyleDecl[];
export declare const tracking: (letterSpacing: StringEnumToNumeric<keyof typeof theme.letterSpacing> | NonNumeric<keyof typeof theme.letterSpacing>) => EmbedTemplateStyleDecl[];
export declare const outline: (_value: "none") => EmbedTemplateStyleDecl[];
type TextSize = keyof typeof theme.fontSize;
export declare const text: (sizeOrColor: TextSize | keyof typeof theme.colors) => EmbedTemplateStyleDecl[];
export declare const noUnderline: () => EmbedTemplateStyleDecl[];
export declare const underline: () => EmbedTemplateStyleDecl[];
export declare const underlineOffset: (offset: StringEnumToNumeric<keyof typeof theme.textUnderlineOffset>) => EmbedTemplateStyleDecl[];
export declare const font: (weight: "thin" | "extralight" | "light" | "normal" | "medium" | "semibold" | "bold" | "extrabold" | "black") => EmbedTemplateStyleDecl[];
export declare const whitespace: (value: "normal" | "nowrap" | "pre" | "pre-line" | "pre-wrap" | "break-spaces") => EmbedTemplateStyleDecl[];
export declare const shadow: (shadowSize: keyof typeof theme.boxShadow) => EmbedTemplateStyleDecl[];
export declare const ring: (ringColor: keyof typeof theme.colors, ringWidth: StringEnumToNumeric<keyof typeof theme.ringWidth>, ringOffsetColor?: keyof typeof theme.colors, ringOffsetWidth?: StringEnumToNumeric<keyof typeof theme.ringOffsetWidth>) => EmbedTemplateStyleDecl[];
export declare const pointerEvents: (value: "none" | "auto") => EmbedTemplateStyleDecl[];
export declare const transition: (value: "none" | "all" | "transform") => EmbedTemplateStyleDecl[];
export declare const duration: (ms: number) => EmbedTemplateStyleDecl[];
export declare const hover: (value: EmbedTemplateStyleDecl[]) => EmbedTemplateStyleDecl[];
export declare const focus: (value: EmbedTemplateStyleDecl[]) => EmbedTemplateStyleDecl[];
export declare const focusVisible: (value: EmbedTemplateStyleDecl[]) => EmbedTemplateStyleDecl[];
export declare const disabled: (value: EmbedTemplateStyleDecl[]) => EmbedTemplateStyleDecl[];
export declare const state: (value: EmbedTemplateStyleDecl[], state: string) => EmbedTemplateStyleDecl[];
export {};
