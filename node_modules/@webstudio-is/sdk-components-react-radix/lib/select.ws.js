import { SelectIcon as V, TriggerIcon as w, FormTextFieldIcon as T, ContentIcon as M, ViewportIcon as C, ItemIcon as k, CheckMarkIcon as d, TextIcon as F } from "@webstudio-is/icons/svg";
import { button as q, span as s, div as P } from "@webstudio-is/sdk/normalize.css";
import { flex as r, h as m, w as t, items as l, justify as y, rounded as a, border as o, bg as p, px as $, py as u, text as e, state as h, focus as S, outline as g, ring as E, disabled as W, cursor as f, opacity as I, relative as v, z as j, property as n, overflow as z, shadow as D, p as H, select as L, pl as U, pr as A, pointerEvents as B, absolute as G, left as J } from "./theme/tailwind-classes.js";
import { propsSelect as K, propsSelectTrigger as N, propsSelectValue as O, propsSelectContent as Q, propsSelectViewport as R, propsSelectItem as X, propsSelectItemIndicator as Y, propsSelectItemText as Z } from "./__generated__/select.props.js";
const i = {
  div: P
}, c = ({
  props: b,
  children: x
}) => ({
  type: "instance",
  component: "SelectItem",
  props: b,
  // relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none
  // focus:bg-accent focus:text-accent-foreground
  // data-[disabled]:pointer-events-none data-[disabled]:opacity-50
  styles: [
    v(),
    r(),
    t("full"),
    f("default"),
    L(),
    l("center"),
    a("md"),
    u(1.5),
    U(8),
    A(2),
    e("sm"),
    g(),
    S([p("accent"), e("accentForeground")].flat()),
    h(
      [B("none"), I(50)].flat(),
      "[data-disabled]"
    )
  ].flat(),
  children: [
    {
      type: "instance",
      component: "SelectItemIndicator",
      // absolute left-2 flex h-3.5 w-3.5 items-center justify-center
      styles: [
        G(),
        J(2),
        r(),
        m(3.5),
        t(3.5),
        l("center"),
        y("center")
      ].flat(),
      children: [
        {
          type: "instance",
          component: "HtmlEmbed",
          label: "Indicator Icon",
          props: [
            {
              type: "string",
              name: "code",
              value: d
            }
          ],
          children: []
        }
      ]
    },
    {
      type: "instance",
      component: "SelectItemText",
      children: x
    }
  ]
}), ne = {
  category: "radix",
  order: 10,
  type: "container",
  icon: V,
  stylable: !1,
  description: "Use within a form to give your users a list of options to choose from.",
  template: [
    {
      type: "instance",
      component: "Select",
      variables: {
        selectValue: { initialValue: "" }
      },
      props: [
        {
          name: "value",
          type: "expression",
          code: "selectValue"
        },
        {
          name: "onValueChange",
          type: "action",
          value: [
            { type: "execute", args: ["value"], code: "selectValue = value" }
          ]
        }
      ],
      children: [
        {
          type: "instance",
          component: "SelectTrigger",
          // flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background
          // placeholder:text-muted-foreground
          // focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2
          // disabled:cursor-not-allowed disabled:opacity-50
          styles: [
            r(),
            m(10),
            t("full"),
            l("center"),
            y("between"),
            a("md"),
            o(),
            o("input"),
            p("background"),
            $(3),
            u(2),
            e("sm"),
            h([e("mutedForeground")].flat(), "::placeholder"),
            S(
              [g(), E("ring", 2, "background", 2)].flat()
            ),
            W([f("not-allowed"), I(50)].flat())
          ].flat(),
          children: [
            {
              type: "instance",
              component: "SelectValue",
              props: [{ name: "placeholder", type: "string", value: "Theme" }],
              children: []
            }
          ]
        },
        {
          type: "instance",
          component: "SelectContent",
          // relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md
          // data-[state=open]:animate-in
          // data-[state=closed]:animate-out data-[state=closed]:fade-out-0
          // data-[state=open]:fade-in-0
          // data-[state=closed]:zoom-out-95
          // data-[state=open]:zoom-in-95
          // data-[side=bottom]:slide-in-from-top-2
          // data-[side=left]:slide-in-from-right-2
          // data-[side=right]:slide-in-from-left-2
          // data-[side=top]:slide-in-from-bottom-2
          // position=popper
          // data-[side=bottom]:translate-y-1
          // data-[side=left]:-translate-x-1
          // data-[side=right]:translate-x-1
          // data-[side=top]:-translate-y-1
          styles: [
            v(),
            j(50),
            n("minWidth", "8rem"),
            z("hidden"),
            a("md"),
            o(),
            p("popover"),
            e("popoverForeground"),
            D("md")
          ].flat(),
          children: [
            {
              type: "instance",
              component: "SelectViewport",
              // p-1
              // position=popper
              // h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]
              styles: [
                H(1),
                n("height", "--radix-select-trigger-height"),
                t("full"),
                n("minWidth", "--radix-select-trigger-width")
              ].flat(),
              children: [
                c({
                  props: [{ name: "value", type: "string", value: "light" }],
                  children: [
                    { type: "text", value: "Light", placeholder: !0 }
                  ]
                }),
                c({
                  props: [{ name: "value", type: "string", value: "dark" }],
                  children: [
                    { type: "text", value: "Dark", placeholder: !0 }
                  ]
                }),
                c({
                  props: [{ name: "value", type: "string", value: "system" }],
                  children: [
                    { type: "text", value: "System", placeholder: !0 }
                  ]
                })
              ]
            }
          ]
        }
      ]
    }
  ]
}, ce = {
  category: "hidden",
  type: "container",
  icon: w,
  detachable: !1,
  presetStyle: {
    button: q
  }
}, re = {
  category: "hidden",
  type: "container",
  label: "Value",
  icon: T,
  detachable: !1,
  presetStyle: {
    span: s
  }
}, le = {
  category: "hidden",
  type: "container",
  icon: M,
  detachable: !1,
  presetStyle: i
}, ae = {
  category: "hidden",
  type: "container",
  icon: C,
  detachable: !1,
  presetStyle: i
}, pe = {
  category: "hidden",
  type: "container",
  icon: k,
  constraints: {
    relation: "ancestor",
    component: { $eq: "SelectViewport" }
  },
  presetStyle: i
}, se = {
  category: "hidden",
  type: "container",
  label: "Indicator",
  icon: d,
  detachable: !1,
  constraints: {
    relation: "ancestor",
    component: { $eq: "SelectItem" }
  },
  presetStyle: {
    span: s
  }
}, ie = {
  category: "hidden",
  type: "container",
  label: "Item Text",
  icon: F,
  detachable: !1,
  constraints: {
    relation: "ancestor",
    component: { $eq: "SelectItem" }
  },
  presetStyle: {
    span: s
  }
}, de = {
  props: K,
  initialProps: ["name", "value", "open", "required"]
}, me = {
  props: N
}, ye = {
  props: O,
  initialProps: ["placeholder"]
}, ue = {
  props: Q
}, he = {
  props: R
}, Se = {
  props: X,
  initialProps: ["value"]
}, ge = {
  props: Y
}, fe = {
  props: Z
};
export {
  ne as metaSelect,
  le as metaSelectContent,
  pe as metaSelectItem,
  se as metaSelectItemIndicator,
  ie as metaSelectItemText,
  ce as metaSelectTrigger,
  re as metaSelectValue,
  ae as metaSelectViewport,
  de as propsMetaSelect,
  ue as propsMetaSelectContent,
  Se as propsMetaSelectItem,
  ge as propsMetaSelectItemIndicator,
  fe as propsMetaSelectItemText,
  me as propsMetaSelectTrigger,
  ye as propsMetaSelectValue,
  he as propsMetaSelectViewport
};
