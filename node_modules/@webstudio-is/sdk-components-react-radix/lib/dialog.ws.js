import { TriggerIcon as c, ContentIcon as g, OverlayIcon as y, HeadingIcon as d, TextIcon as m, ButtonElementIcon as u, DialogIcon as D, LargeXIcon as h } from "@webstudio-is/icons/svg";
import { defaultStates as f } from "@webstudio-is/react-sdk";
import { button as b, div as v, h2 as x, p as T } from "@webstudio-is/sdk/normalize.css";
import { fixed as C, inset as I, z as n, bg as t, backdropBlur as P, flex as e, overflow as S, w as i, gap as a, m as w, maxW as B, border as l, p as M, shadow as k, relative as O, my as r, leading as H, text as o, tracking as E, absolute as j, right as z, top as F, rounded as L, opacity as p, items as R, justify as W, h as X, outline as $, hover as q, focus as A, ring as G } from "./theme/tailwind-classes.js";
import { propsDialog as J, propsDialogTrigger as K, propsDialogContent as N, propsDialogOverlay as Q, propsDialogClose as U, propsDialogTitle as V, propsDialogDescription as Y } from "./__generated__/dialog.props.js";
import { buttonReset as Z, getButtonStyles as _ } from "./theme/styles.js";
const s = {
  div: v
}, ee = {
  h2: x
}, te = {
  p: T
}, pe = {
  category: "hidden",
  type: "container",
  icon: c,
  stylable: !1,
  detachable: !1
}, se = {
  category: "hidden",
  type: "container",
  presetStyle: s,
  icon: g,
  detachable: !1
}, ce = {
  category: "hidden",
  type: "container",
  presetStyle: s,
  icon: y,
  detachable: !1
}, ge = {
  category: "hidden",
  type: "container",
  presetStyle: ee,
  icon: d
}, ye = {
  category: "hidden",
  type: "container",
  presetStyle: te,
  icon: m
}, de = {
  category: "hidden",
  type: "container",
  presetStyle: {
    button: [Z, b].flat()
  },
  states: f,
  icon: u,
  label: "Close Button"
}, me = {
  category: "radix",
  order: 4,
  type: "container",
  icon: D,
  stylable: !1,
  description: "Displays content with an overlay that covers the window, triggered by a button. Clicking the overlay will close the dialog.",
  template: [
    {
      type: "instance",
      component: "Dialog",
      children: [
        {
          type: "instance",
          component: "DialogTrigger",
          children: [
            {
              type: "instance",
              component: "Button",
              styles: _("outline"),
              children: [{ type: "text", value: "Button", placeholder: !0 }]
            }
          ]
        },
        {
          type: "instance",
          component: "DialogOverlay",
          /**
           * fixed inset-0 z-50 bg-background/80 backdrop-blur-sm
           * flex
           **/
          styles: [
            C(),
            I(0),
            n(50),
            t("background", 80),
            P("sm"),
            // To allow positioning Content
            e(),
            S("auto")
          ].flat(),
          children: [
            {
              type: "instance",
              component: "DialogContent",
              /**
               * fixed w-full z-50
               * grid gap-4 max-w-lg
               * m-auto
               * border bg-background p-6 shadow-lg
               **/
              styles: [
                i("full"),
                n(50),
                e(),
                e("col"),
                a(4),
                w("auto"),
                B("lg"),
                l(),
                t("background"),
                M(6),
                k("lg"),
                O()
              ].flat(),
              children: [
                {
                  type: "instance",
                  component: "Box",
                  label: "Dialog Header",
                  styles: [e(), e("col"), a(1)].flat(),
                  children: [
                    {
                      type: "instance",
                      component: "DialogTitle",
                      /**
                       * text-lg leading-none tracking-tight
                       **/
                      styles: [
                        r(0),
                        H("none"),
                        o("lg"),
                        E("tight")
                      ].flat(),
                      children: [
                        {
                          type: "text",
                          value: "Dialog Title you can edit",
                          placeholder: !0
                        }
                      ]
                    },
                    {
                      type: "instance",
                      component: "DialogDescription",
                      /**
                       * text-sm text-muted-foreground
                       **/
                      styles: [
                        r(0),
                        o("sm"),
                        o("mutedForeground")
                      ].flat(),
                      children: [
                        {
                          type: "text",
                          value: "Dialog description text you can edit",
                          placeholder: !0
                        }
                      ]
                    }
                  ]
                },
                {
                  type: "instance",
                  component: "Text",
                  children: [
                    {
                      type: "text",
                      value: "The text you can edit",
                      placeholder: !0
                    }
                  ]
                },
                {
                  type: "instance",
                  component: "DialogClose",
                  /**
                   * absolute right-4 top-4
                   * rounded-sm opacity-70
                   * ring-offset-background
                   * hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2
                   * flex items-center justify-center h-4 w-4
                   **/
                  styles: [
                    j(),
                    z(4),
                    F(4),
                    L("sm"),
                    p(70),
                    e(),
                    R("center"),
                    W("center"),
                    X(4),
                    i(4),
                    l(0),
                    t("transparent"),
                    $(),
                    q(p(100)),
                    A(G("ring", 2, "background", 2))
                  ].flat(),
                  children: [
                    {
                      type: "instance",
                      component: "HtmlEmbed",
                      label: "Close Icon",
                      props: [
                        {
                          type: "string",
                          name: "code",
                          value: h
                        }
                      ],
                      children: []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}, ue = {
  props: J,
  initialProps: []
}, De = {
  props: K
}, he = {
  props: N,
  initialProps: []
}, fe = {
  props: Q,
  initialProps: []
}, be = {
  props: U,
  initialProps: []
}, ve = {
  props: V,
  initialProps: []
}, xe = {
  props: Y,
  initialProps: []
};
export {
  me as metaDialog,
  de as metaDialogClose,
  se as metaDialogContent,
  ye as metaDialogDescription,
  ce as metaDialogOverlay,
  ge as metaDialogTitle,
  pe as metaDialogTrigger,
  ue as propsMetaDialog,
  be as propsMetaDialogClose,
  he as propsMetaDialogContent,
  xe as propsMetaDialogDescription,
  fe as propsMetaDialogOverlay,
  ve as propsMetaDialogTitle,
  De as propsMetaDialogTrigger
};
