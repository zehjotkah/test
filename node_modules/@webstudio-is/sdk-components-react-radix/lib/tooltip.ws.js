import { TriggerIcon as e, ContentIcon as o, TooltipIcon as n } from "@webstudio-is/icons/svg";
import "@webstudio-is/react-sdk";
import { div as r } from "@webstudio-is/sdk/normalize.css";
import { z as p, overflow as i, rounded as a, border as l, bg as s, px as c, py as d, text as t, shadow as m } from "./theme/tailwind-classes.js";
import { propsTooltip as g, propsTooltipTrigger as h, propsTooltipContent as y } from "./__generated__/tooltip.props.js";
import { getButtonStyles as T } from "./theme/styles.js";
const f = {
  div: r
}, B = {
  category: "hidden",
  detachable: !1,
  type: "container",
  icon: e,
  stylable: !1
}, I = {
  category: "hidden",
  detachable: !1,
  type: "container",
  presetStyle: f,
  icon: o
}, M = {
  category: "radix",
  order: 7,
  type: "container",
  icon: n,
  stylable: !1,
  description: "Displays content that is related to the trigger, when the trigger is hovered with the mouse or focused with the keyboard. You are reading an example of a tooltip right now.",
  template: [
    {
      type: "instance",
      component: "Tooltip",
      props: [],
      children: [
        {
          type: "instance",
          component: "TooltipTrigger",
          children: [
            {
              type: "instance",
              component: "Button",
              styles: T("outline"),
              children: [{ type: "text", value: "Button", placeholder: !0 }]
            }
          ]
        },
        {
          type: "instance",
          component: "TooltipContent",
          /**
           *  z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md
           **/
          styles: [
            p(50),
            i("hidden"),
            a("md"),
            l(),
            s("popover"),
            c(3),
            d(1.5),
            t("sm"),
            t("popoverForeground"),
            m("md")
          ].flat(),
          children: [
            {
              type: "instance",
              component: "Text",
              children: [
                {
                  type: "text",
                  value: "The text you can edit",
                  placeholder: !0
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}, D = {
  props: g,
  initialProps: ["open", "delayDuration", "disableHoverableContent"]
}, O = {
  props: h
}, P = {
  props: y,
  initialProps: ["side", "sideOffset", "align", "alignOffset"]
};
export {
  M as metaTooltip,
  I as metaTooltipContent,
  B as metaTooltipTrigger,
  D as propsMetaTooltip,
  P as propsMetaTooltipContent,
  O as propsMetaTooltipTrigger
};
