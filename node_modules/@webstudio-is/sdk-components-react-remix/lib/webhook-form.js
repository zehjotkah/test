import { jsxs as u, jsx as l } from "react/jsx-runtime";
import { forwardRef as f, useRef as h, useEffect as v } from "react";
import { useFetcher as F } from "@remix-run/react";
import { formIdFieldName as M, formBotFieldName as g } from "@webstudio-is/sdk/runtime";
const x = (t, e) => {
  const c = h(e);
  c.current = e;
  const s = h(t);
  v(() => {
    s.current.state !== t.state && t.state === "idle" && t.data !== void 0 && c.current(t.data), s.current = t;
  }, [t]);
}, p = (t, e) => e === 0 ? t : p(e, t % e), R = (t, e) => {
  const c = p(t, e);
  return `${t / c}/${e / c}`;
}, $ = () => {
  if (typeof matchMedia > "u")
    return !0;
  const { width: t, height: e } = screen, c = R(t, e), s = matchMedia(
    `(device-aspect-ratio: ${c})`
  ).matches, o = matchMedia(
    `(device-width: ${t}px) and (device-height: ${e}px)`
  ).matches, a = matchMedia(
    `(device-width: ${t - 1}px) and (device-height: ${e}px)`
  ).matches, n = matchMedia("(prefers-color-scheme: light)").matches, d = matchMedia("(prefers-color-scheme: dark)").matches;
  return (s && o && !a && n !== d) === !1;
}, A = f(
  ({ children: t, action: e, method: c, state: s = "initial", onStateChange: o, ...a }, n) => {
    const d = F();
    x(d, (r) => {
      const i = (r == null ? void 0 : r.success) === !0 ? "success" : "error";
      o == null || o(i);
    });
    const m = (r) => {
      const i = document.createElement("input");
      i.type = "hidden", i.name = g, i.value = $() ? "jsdom" : Date.now().toString(16), r.currentTarget.appendChild(i);
    };
    return /* @__PURE__ */ u(
      d.Form,
      {
        ...a,
        method: "post",
        "data-state": s,
        ref: n,
        onSubmit: m,
        children: [
          /* @__PURE__ */ l(
            "input",
            {
              type: "hidden",
              name: M,
              value: e == null ? void 0 : e.toString()
            }
          ),
          t
        ]
      }
    );
  }
);
A.displayName = "WebhookForm";
export {
  A as WebhookForm
};
