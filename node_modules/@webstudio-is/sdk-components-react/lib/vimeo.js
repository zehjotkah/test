import { jsx as s, jsxs as F, Fragment as z } from "react/jsx-runtime";
import { colord as T } from "colord";
import { createContext as q, forwardRef as G, useState as h, useContext as H, useEffect as u } from "react";
import { ReactSdkContext as Y } from "@webstudio-is/react-sdk/runtime";
const J = (e) => {
  if (e.url === void 0)
    return;
  let t;
  try {
    const o = new URL(e.url);
    t = new URL(x), t.pathname = `/video${o.pathname}`;
  } catch {
  }
  if (t === void 0)
    return;
  const r = {
    showPortrait: "portrait",
    showByline: "byline",
    showTitle: "title",
    controlsColor: "color",
    showControls: "controls",
    interactiveParams: "interactive_params",
    backgroundMode: "background",
    doNotTrack: "dnt"
  };
  let n;
  for (n in e) {
    const o = e[n];
    if (n === "url" || o === void 0)
      continue;
    const a = r[n] ?? n;
    t.searchParams.append(a, o.toString());
  }
  if (t.searchParams.set("autoplay", "true"), typeof e.controlsColor == "string") {
    const o = T(e.controlsColor).toHex().replace("#", "");
    t.searchParams.set("color", o);
  }
  return e.showPortrait && t.searchParams.set("title", "true"), e.showByline && (t.searchParams.set("portrait", "true"), t.searchParams.set("title", "true")), t.toString();
}, f = (e) => {
  const t = document.createElement("link");
  t.rel = "preconnect", t.href = e, t.crossOrigin = "true", document.head.appendChild(t);
};
let I = !1;
const K = "https://f.vimeocdn.com", x = "https://player.vimeo.com", b = "https://i.vimeocdn.com", Q = () => {
  I || window.matchMedia("(hover: none)").matches || (f(K), f(x), f(b), I = !0);
}, W = (e) => {
  try {
    const r = new URL(e).pathname.split("/")[2];
    return r === "" || r == null ? void 0 : r;
  } catch {
  }
}, X = async (e) => {
  const r = `https://vimeo.com/api/v2/video/${W(e)}.json`, o = (await (await fetch(r)).json())[0].thumbnail_large, a = o.substr(o.lastIndexOf("/") + 1).split("_")[0], i = new URL(b);
  return i.pathname = `/video/${a}.webp`, i.searchParams.append("mw", "1100"), i.searchParams.append("mh", "619"), i.searchParams.append("q", "70"), i;
}, Z = () => /* @__PURE__ */ s(
  "div",
  {
    style: {
      display: "flex",
      width: "100%",
      height: "100%",
      alignItems: "center",
      justifyContent: "center",
      fontSize: "1.2em"
    },
    children: 'Open the "Settings" panel and paste a video URL, e.g. https://vimeo.com/831343124.'
  }
), tt = ({
  status: e,
  loading: t,
  videoUrl: r,
  previewImageUrl: n,
  autoplay: o,
  renderer: a,
  showPreview: i,
  onStatusChange: c,
  onPreviewImageUrlChange: l
}) => {
  const [m, p] = h(0);
  if (u(() => {
    o && a !== "canvas" && e === "initial" && c("loading");
  }, [o, e, a, c]), u(() => {
    a !== "canvas" && Q();
  }, [a]), u(() => {
    if (r !== void 0) {
      if (i === !1) {
        l(void 0);
        return;
      }
      n === void 0 && X(r).then(l).catch(() => {
        console.error(`Could not load preview image for ${r}`);
      });
    }
  }, [l, i, r, n]), !(a === "canvas" || e === "initial"))
    return /* @__PURE__ */ s(
      "iframe",
      {
        src: r,
        loading: t,
        allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture;",
        allowFullScreen: !0,
        style: {
          position: "absolute",
          width: "100%",
          height: "100%",
          opacity: m,
          transition: "opacity 1s",
          border: "none"
        },
        onLoad: () => {
          c("ready"), p(1);
        }
      }
    );
}, et = q({
  onInitPlayer: () => {
  },
  status: "initial"
}), rt = G(
  ({
    url: e,
    loading: t = "lazy",
    autoplay: r = !1,
    autopause: n = !0,
    backgroundMode: o = !1,
    showByline: a = !1,
    showControls: i = !0,
    doNotTrack: c = !1,
    keyboard: l = !0,
    loop: m = !1,
    muted: p = !1,
    pip: R = !1,
    playsinline: U = !0,
    showPortrait: S = !0,
    quality: L = "auto",
    responsive: k = !0,
    speed: E = !1,
    showTitle: _ = !1,
    transparent: j = !0,
    showPreview: M = !1,
    autopip: N,
    controlsColor: O,
    interactiveParams: V,
    texttrack: $,
    children: A,
    ...B
  }, d) => {
    const [v, y] = h("initial"), [w, D] = h(), { renderer: g } = H(Y), P = J({
      url: e,
      autoplay: r,
      autopause: n,
      backgroundMode: o,
      showControls: i,
      controlsColor: O,
      doNotTrack: c,
      interactiveParams: V,
      keyboard: l,
      loop: m,
      muted: p,
      pip: R,
      playsinline: U,
      quality: L,
      responsive: k,
      speed: E,
      texttrack: $,
      showTitle: _,
      transparent: j,
      showPortrait: S,
      autopip: N
    });
    return /* @__PURE__ */ s(
      et.Provider,
      {
        value: {
          status: v,
          previewImageUrl: w,
          onInitPlayer() {
            g !== "canvas" && y("loading");
          }
        },
        children: /* @__PURE__ */ s(
          "div",
          {
            ...B,
            ref: (C) => {
              d !== null && (typeof d == "function" ? d(C) : d.current = C);
            },
            children: P === void 0 ? /* @__PURE__ */ s(Z, {}) : /* @__PURE__ */ F(z, { children: [
              A,
              /* @__PURE__ */ s(
                tt,
                {
                  autoplay: r,
                  videoUrl: P,
                  previewImageUrl: w,
                  loading: t,
                  showPreview: M,
                  renderer: g,
                  status: v,
                  onStatusChange: y,
                  onPreviewImageUrlChange: D
                }
              )
            ] })
          }
        )
      }
    );
  }
);
rt.displayName = "Vimeo";
export {
  rt as Vimeo,
  et as VimeoContext
};
