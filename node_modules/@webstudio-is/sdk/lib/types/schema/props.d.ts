import { z } from "zod";
export declare const Prop: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"number">;
    value: z.ZodNumber;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: number;
    type: "number";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: number;
    type: "number";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"string">;
    value: z.ZodString;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "string";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: string;
    type: "string";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"boolean">;
    value: z.ZodBoolean;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: boolean;
    type: "boolean";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: boolean;
    type: "boolean";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"json">;
    value: z.ZodUnknown;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "json";
    id: string;
    name: string;
    instanceId: string;
    value?: unknown;
    required?: boolean | undefined;
}, {
    type: "json";
    id: string;
    name: string;
    instanceId: string;
    value?: unknown;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"asset">;
    value: z.ZodString;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "asset";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: string;
    type: "asset";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"page">;
    value: z.ZodUnion<[z.ZodString, z.ZodObject<{
        pageId: z.ZodString;
        instanceId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        instanceId: string;
        pageId: string;
    }, {
        instanceId: string;
        pageId: string;
    }>]>;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: (string | {
        instanceId: string;
        pageId: string;
    }) & (string | {
        instanceId: string;
        pageId: string;
    } | undefined);
    type: "page";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: (string | {
        instanceId: string;
        pageId: string;
    }) & (string | {
        instanceId: string;
        pageId: string;
    } | undefined);
    type: "page";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"string[]">;
    value: z.ZodArray<z.ZodString, "many">;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string[];
    type: "string[]";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: string[];
    type: "string[]";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"parameter">;
    value: z.ZodString;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "parameter";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: string;
    type: "parameter";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"resource">;
    value: z.ZodString;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "resource";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: string;
    type: "resource";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"expression">;
    value: z.ZodString;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "expression";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: string;
    type: "expression";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"action">;
    value: z.ZodArray<z.ZodObject<{
        type: z.ZodLiteral<"execute">;
        args: z.ZodArray<z.ZodString, "many">;
        code: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        code: string;
        type: "execute";
        args: string[];
    }, {
        code: string;
        type: "execute";
        args: string[];
    }>, "many">;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: {
        code: string;
        type: "execute";
        args: string[];
    }[];
    type: "action";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: {
        code: string;
        type: "execute";
        args: string[];
    }[];
    type: "action";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>]>;
export type Prop = z.infer<typeof Prop>;
export declare const Props: z.ZodMap<z.ZodString, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"number">;
    value: z.ZodNumber;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: number;
    type: "number";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: number;
    type: "number";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"string">;
    value: z.ZodString;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "string";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: string;
    type: "string";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"boolean">;
    value: z.ZodBoolean;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: boolean;
    type: "boolean";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: boolean;
    type: "boolean";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"json">;
    value: z.ZodUnknown;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "json";
    id: string;
    name: string;
    instanceId: string;
    value?: unknown;
    required?: boolean | undefined;
}, {
    type: "json";
    id: string;
    name: string;
    instanceId: string;
    value?: unknown;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"asset">;
    value: z.ZodString;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "asset";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: string;
    type: "asset";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"page">;
    value: z.ZodUnion<[z.ZodString, z.ZodObject<{
        pageId: z.ZodString;
        instanceId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        instanceId: string;
        pageId: string;
    }, {
        instanceId: string;
        pageId: string;
    }>]>;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: (string | {
        instanceId: string;
        pageId: string;
    }) & (string | {
        instanceId: string;
        pageId: string;
    } | undefined);
    type: "page";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: (string | {
        instanceId: string;
        pageId: string;
    }) & (string | {
        instanceId: string;
        pageId: string;
    } | undefined);
    type: "page";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"string[]">;
    value: z.ZodArray<z.ZodString, "many">;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string[];
    type: "string[]";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: string[];
    type: "string[]";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"parameter">;
    value: z.ZodString;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "parameter";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: string;
    type: "parameter";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"resource">;
    value: z.ZodString;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "resource";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: string;
    type: "resource";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"expression">;
    value: z.ZodString;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "expression";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: string;
    type: "expression";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"action">;
    value: z.ZodArray<z.ZodObject<{
        type: z.ZodLiteral<"execute">;
        args: z.ZodArray<z.ZodString, "many">;
        code: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        code: string;
        type: "execute";
        args: string[];
    }, {
        code: string;
        type: "execute";
        args: string[];
    }>, "many">;
    id: z.ZodString;
    instanceId: z.ZodString;
    name: z.ZodString;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: {
        code: string;
        type: "execute";
        args: string[];
    }[];
    type: "action";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}, {
    value: {
        code: string;
        type: "execute";
        args: string[];
    }[];
    type: "action";
    id: string;
    name: string;
    instanceId: string;
    required?: boolean | undefined;
}>]>>;
export type Props = z.infer<typeof Props>;
