import { z } from "zod";
export declare const DataSourceVariableValue: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"number">;
    value: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    value: number;
    type: "number";
}, {
    value: number;
    type: "number";
}>, z.ZodObject<{
    type: z.ZodLiteral<"string">;
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "string";
}, {
    value: string;
    type: "string";
}>, z.ZodObject<{
    type: z.ZodLiteral<"boolean">;
    value: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    value: boolean;
    type: "boolean";
}, {
    value: boolean;
    type: "boolean";
}>, z.ZodObject<{
    type: z.ZodLiteral<"string[]">;
    value: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    value: string[];
    type: "string[]";
}, {
    value: string[];
    type: "string[]";
}>, z.ZodObject<{
    type: z.ZodLiteral<"json">;
    value: z.ZodUnknown;
}, "strip", z.ZodTypeAny, {
    type: "json";
    value?: unknown;
}, {
    type: "json";
    value?: unknown;
}>]>;
export declare const DataSource: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"variable">;
    id: z.ZodString;
    scopeInstanceId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    value: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"number">;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "number";
    }, {
        value: number;
        type: "number";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"string">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        type: "string";
    }, {
        value: string;
        type: "string";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"boolean">;
        value: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        value: boolean;
        type: "boolean";
    }, {
        value: boolean;
        type: "boolean";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"string[]">;
        value: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        value: string[];
        type: "string[]";
    }, {
        value: string[];
        type: "string[]";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"json">;
        value: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        type: "json";
        value?: unknown;
    }, {
        type: "json";
        value?: unknown;
    }>]>;
}, "strip", z.ZodTypeAny, {
    value: {
        value: number;
        type: "number";
    } | {
        value: string;
        type: "string";
    } | {
        value: boolean;
        type: "boolean";
    } | {
        value: string[];
        type: "string[]";
    } | {
        type: "json";
        value?: unknown;
    };
    type: "variable";
    id: string;
    name: string;
    scopeInstanceId?: string | undefined;
}, {
    value: {
        value: number;
        type: "number";
    } | {
        value: string;
        type: "string";
    } | {
        value: boolean;
        type: "boolean";
    } | {
        value: string[];
        type: "string[]";
    } | {
        type: "json";
        value?: unknown;
    };
    type: "variable";
    id: string;
    name: string;
    scopeInstanceId?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"parameter">;
    id: z.ZodString;
    scopeInstanceId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "parameter";
    id: string;
    name: string;
    scopeInstanceId?: string | undefined;
}, {
    type: "parameter";
    id: string;
    name: string;
    scopeInstanceId?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"resource">;
    id: z.ZodString;
    scopeInstanceId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    resourceId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "resource";
    id: string;
    name: string;
    resourceId: string;
    scopeInstanceId?: string | undefined;
}, {
    type: "resource";
    id: string;
    name: string;
    resourceId: string;
    scopeInstanceId?: string | undefined;
}>]>;
export type DataSource = z.infer<typeof DataSource>;
export declare const DataSources: z.ZodMap<z.ZodString, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"variable">;
    id: z.ZodString;
    scopeInstanceId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    value: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"number">;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "number";
    }, {
        value: number;
        type: "number";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"string">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        type: "string";
    }, {
        value: string;
        type: "string";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"boolean">;
        value: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        value: boolean;
        type: "boolean";
    }, {
        value: boolean;
        type: "boolean";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"string[]">;
        value: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        value: string[];
        type: "string[]";
    }, {
        value: string[];
        type: "string[]";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"json">;
        value: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        type: "json";
        value?: unknown;
    }, {
        type: "json";
        value?: unknown;
    }>]>;
}, "strip", z.ZodTypeAny, {
    value: {
        value: number;
        type: "number";
    } | {
        value: string;
        type: "string";
    } | {
        value: boolean;
        type: "boolean";
    } | {
        value: string[];
        type: "string[]";
    } | {
        type: "json";
        value?: unknown;
    };
    type: "variable";
    id: string;
    name: string;
    scopeInstanceId?: string | undefined;
}, {
    value: {
        value: number;
        type: "number";
    } | {
        value: string;
        type: "string";
    } | {
        value: boolean;
        type: "boolean";
    } | {
        value: string[];
        type: "string[]";
    } | {
        type: "json";
        value?: unknown;
    };
    type: "variable";
    id: string;
    name: string;
    scopeInstanceId?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"parameter">;
    id: z.ZodString;
    scopeInstanceId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "parameter";
    id: string;
    name: string;
    scopeInstanceId?: string | undefined;
}, {
    type: "parameter";
    id: string;
    name: string;
    scopeInstanceId?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"resource">;
    id: z.ZodString;
    scopeInstanceId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    resourceId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "resource";
    id: string;
    name: string;
    resourceId: string;
    scopeInstanceId?: string | undefined;
}, {
    type: "resource";
    id: string;
    name: string;
    resourceId: string;
    scopeInstanceId?: string | undefined;
}>]>>;
export type DataSources = z.infer<typeof DataSources>;
