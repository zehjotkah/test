import type { ReactNode } from "react";
export declare class ExpressionValue {
    value: string;
    constructor(expression: string);
}
export declare class ParameterValue {
    value: string;
    constructor(dataSourceID: string);
}
export declare class ResourceValue {
    value: string;
    constructor(resourceId: string);
}
export declare class ActionValue {
    value: {
        type: "execute";
        args: string[];
        code: string;
    };
    constructor(args: string[], code: string);
}
export declare class AssetValue {
    value: string;
    constructor(assetId: string);
}
export declare class PageValue {
    value: string | {
        pageId: string;
        instanceId: string;
    };
    constructor(pageId: string, instanceId?: string);
}
export declare const renderJsx: (root: JSX.Element) => {
    instances: Map<string, {
        type: "instance";
        id: string;
        children: ({
            value: string;
            type: "text";
            placeholder?: boolean | undefined;
        } | {
            value: string;
            type: "id";
        } | {
            value: string;
            type: "expression";
        })[];
        component: string;
        label?: string | undefined;
    }>;
    props: Map<string, {
        value: number;
        type: "number";
        id: string;
        name: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "string";
        id: string;
        name: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: boolean;
        type: "boolean";
        id: string;
        name: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        type: "json";
        id: string;
        name: string;
        instanceId: string;
        value?: unknown;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "asset";
        id: string;
        name: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: (string | {
            instanceId: string;
            pageId: string;
        }) & (string | {
            instanceId: string;
            pageId: string;
        } | undefined);
        type: "page";
        id: string;
        name: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string[];
        type: "string[]";
        id: string;
        name: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "parameter";
        id: string;
        name: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "resource";
        id: string;
        name: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "expression";
        id: string;
        name: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: {
            code: string;
            type: "execute";
            args: string[];
        }[];
        type: "action";
        id: string;
        name: string;
        instanceId: string;
        required?: boolean | undefined;
    }>;
};
type ComponentProps = Record<string, unknown> & Record<`${string}:expression`, string> & {
    "ws:id"?: string;
    "ws:label"?: string;
    children?: ReactNode | ExpressionValue;
};
type Component = {
    displayName: string;
} & ((props: ComponentProps) => ReactNode);
export declare const createProxy: (prefix: string) => Record<string, Component>;
export declare const $: Record<string, Component>;
export declare const ws: Record<string, Component>;
export {};
