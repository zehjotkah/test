import { type Identifier } from "acorn";
import type { DataSources } from "./schema/data-sources";
import type { Scope } from "./scope";
export type Diagnostic = {
    from: number;
    to: number;
    severity: "error" | "hint" | "info" | "warning";
    message: string;
};
export declare const lintExpression: ({ expression, availableVariables, allowAssignment, }: {
    expression: string;
    availableVariables?: Set<Identifier["name"]>;
    allowAssignment?: boolean;
}) => Diagnostic[];
/**
 * check whether provided expression is a literal value
 * like "", 0 or { param: "value" }
 * which does not depends on any variable
 */
export declare const isLiteralExpression: (expression: string) => boolean;
export declare const getExpressionIdentifiers: (expression: string) => Set<string>;
/**
 * transpile expression into executable one
 *
 * add optional chaining operator to every member expression
 * to access any field without runtime errors
 *
 * replace variable names if necessary
 */
export declare const transpileExpression: ({ expression, executable, replaceVariable, }: {
    expression: string;
    executable?: boolean;
    replaceVariable?: (identifier: string, assignee: boolean) => string | undefined | void;
}) => string;
/**
 * parse object expression into key value map
 * where each value is expression
 */
export declare const parseObjectExpression: (expression: string) => Map<string, string>;
/**
 * generate key value map into object expression
 * after updating individual value expressions
 */
export declare const generateObjectExpression: (map: Map<string, string>) => string;
export declare const encodeDataSourceVariable: (id: string) => string;
export declare const decodeDataSourceVariable: (name: string) => string | undefined;
export declare const generateExpression: ({ expression, dataSources, usedDataSources, scope, }: {
    expression: string;
    dataSources: DataSources;
    usedDataSources: DataSources;
    scope: Scope;
}) => string;
export declare const executeExpression: (expression: undefined | string) => any;
