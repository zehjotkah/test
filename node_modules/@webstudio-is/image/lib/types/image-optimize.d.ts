/**
 * # Responsive Image component helpers.
 *
 * ## Quick summary about img srcset and sizes attributes:
 *
 * There are 2 ways to define what image will be loaded in the img property srcset.
 *
 * 1. via pixel density descriptor 'x', like `srcset="photo-small.jpg 1x, photo-medium.jpg 1.5x, photo-huge.jpg 2x"`
 *   src will be selected depending on `device-pixel-ratio`.
 *
 * 2. via viewport width descriptor 'w' and sizes property containing source size descriptors, like
 *   `srcset="photo-small.jpg 320w, photo-medium.jpg 640w, photo-huge.jpg 1280w"`
 *   `sizes="(max-width: 600px) 400px, (max-width: 1200px) 70vw, 50vw"`
 *
 *   The browser finds the first matching media query from source size descriptors,
 *   then use source size value to generate internally srcset
 *   with pixel density descriptors dividing width descriptor value by source size value.
 *
 *   Using the example above for viewport width 800px.
 *   The first matching media query is (max-width: 1200px)
 *   source size value is 70vw  equal to 800px * 0,7 = 560px
 *
 *   browser internal srcset will be (we divide `w` descriptor by source size value):
 *   photo-small.jpg 320w/560px, photo-medium.jpg 640w/560px, photo-huge.jpg 1280w/560px =>
 *   photo-small.jpg 0.57x, photo-medium.jpg 1.14x, photo-huge.jpg 2.28x
 *
 *   Finally same rules as for pixel density descriptor 'x' are applied.
 *
 * ## Algorithm (without optimizations):
 *
 * We have a predefined array of all supported image sizes allSizes, this is the real width of an image in pixels.
 * This is good for caching, as we can cache image with specific width and then use it for different devices.
 *
 * > allSizes array is a tradeoff between cache and the best possible image size you deliver to the user.
 * > If allSizes.length is too small, you will deliver too big images to the user,
 * > if allSizes.length is too big, you will have many caches misses.
 *
 * If img has a defined width property.
 *   1. filter allSizes to exclude loading images higher that maxDevicePixelRatio * img.width
 *
 *
 * If img has no defined width property.
 *   1. Generate srcset = allSizes.map((w) => `${getImageSrcAtWidth(w)} ${w}w`)
 *   2. Use sizes property, or if it is not defined use opinionated DEFAULT_SIZES = "(min-width: 1280px) 50vw, 100vw";
 *
 * Optimizations applied now:
 *
 * - If the sizes property is defined, we can exclude from `srcsets` all images
 *   which are smaller than the `smallestRatio * smallesDeviceSize`
 *
 * Future (not implemented) optimizations and improvements:
 *
 * - Knowing image size on different viewport widths we can provide nondefault sizes property
 * - Knowledge of Image aspect-ratio would allow cropping images serverside.
 * - Early hints for high priority images https://blog.cloudflare.com/early-hints/
 * - Slow networks optimizations
 * - 404 etc processing with CSS - https://bitsofco.de/styling-broken-images/ (has some opinionated issues) or js solution with custom user fallback.
 *
 * # Attributions
 *
 * The MIT License (MIT)
 *
 * applies to:
 *
 * - https://github.com/vercel/next.js, Copyright (c) 2022 Vercel, Inc.
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2022 Vercel, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 **/
export type ImageLoader = (props: {
    width: number;
    quality: number;
    src: string;
    format?: "auto";
    height?: number;
    fit?: "pad";
} | {
    src: string;
    format: "raw";
}) => string;
export declare const allSizes: number[];
/**
 * URL.canParse(props.src)
 */
export declare const UrlCanParse: (url: string) => boolean;
export declare const getImageAttributes: (props: {
    src: string | undefined;
    srcSet: string | undefined;
    sizes: string | undefined;
    width: string | number | undefined;
    quality: string | number | undefined;
    loader: ImageLoader;
    optimize: boolean;
}) => {
    src: string;
    srcSet?: string;
    sizes?: string;
} | undefined;
